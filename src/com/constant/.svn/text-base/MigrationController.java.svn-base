package com.sony.constant;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.jdo.PersistenceManager;
import javax.jdo.Query;

import com.google.appengine.api.datastore.Text;
import com.sony.bean.LogInfo;
import com.sony.model.HeaderInfo;
import com.sony.model.LogFile;
import com.sony.model.UserDetails;
import com.sony.util.DateComparator;


public enum MigrationController {
	
	INSTANCE;
	
	/*public List<HeaderInfo> getHeaderDetail(String headerId) {
		//Runtime.getRuntime().exec("run.bat", null);
		PersistenceManager pm = PMF.get().getPersistenceManager();
		int strtIndex = headerId.indexOf ("(");
		strtIndex +=1;
		int endIndex = headerId.indexOf (")");
		String tmp = headerId.substring(strtIndex,endIndex);
		Query query = pm.newQuery(HeaderInfo.class);
		query.setFilter("header_Id == "+tmp);
		//System.out.println("query==="+query.toString());
		//System.out.println("sys.....Testing...." + query.toString());
		try{
			List<HeaderInfo> headerDetails = (List<HeaderInfo>) query.execute();
			return headerDetails;
		}catch(Exception e){
			System.out.println("Exception at getHeaderDetail() = "+e);
		}finally{
			query.closeAll();
		}
		return null;
		
	}*/
	
	public List<HeaderInfo> getHeaderList() {
			
			PersistenceManager pm = PMF.get().getPersistenceManager();
			Query query = pm.newQuery(HeaderInfo.class);
			//System.out.println("query==="+query.toString());
			
			try{
				List<HeaderInfo> headerDetails = (List<HeaderInfo>) query.execute();
				return headerDetails;
			}catch(Exception e){
				System.out.println("Exception at getHeaderList() = "+e);
			}finally{
				query.closeAll();
			}
			return null;
			
	}
	
	public List<HeaderInfo> getRecentHeaderId(String valid) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
	    Query query = pm.newQuery(HeaderInfo.class);
	    query.setFilter(" validity == \"" + valid + "\"");
	    query.setOrdering("loggedDateTime desc");
	    //System.out.println("query==="+query.toString());
		
	    List<HeaderInfo> headerList = (List<HeaderInfo>) query.execute();
	    headerList = (List<HeaderInfo>)pm.detachCopyAll(headerList);
	    Collections.sort(headerList, new DateComparator());
		return headerList;
	}
	
	public List<HeaderInfo> getCompleteHeaderList() {
		PersistenceManager pm = PMF.get().getPersistenceManager();
	    Query query = pm.newQuery(HeaderInfo.class);
	    query.setOrdering("loggedDateTime desc");
	    List<HeaderInfo> headerList = (List<HeaderInfo>) query.execute();
	    headerList = (List<HeaderInfo>)pm.detachCopyAll(headerList);
	    Collections.sort(headerList, new DateComparator());
		return headerList;
	}
	
	public List<HeaderInfo> getHeaderDetails(long headerId) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
	    Query query = pm.newQuery(HeaderInfo.class);
	    query.setFilter("header_Id == "+headerId);
	    query.setOrdering("loggedDateTime desc");
	    //System.out.println("query==="+query.toString());
		
	    List<HeaderInfo> headerList = (List<HeaderInfo>) query.execute();
	    headerList = (List<HeaderInfo>)pm.detachCopyAll(headerList);
	    Collections.sort(headerList, new DateComparator());
		return headerList;
	}
	
	public List<HeaderInfo> getHeaderDetails(String parentId) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
	    Query query = pm.newQuery(HeaderInfo.class);
	    //query.setFilter("parent_Id == "+parentId);
	    query.setFilter("parent_Id == \""+parentId+"\"");
	    //query.setOrdering("loggedDateTime desc");
	    //System.out.println("query==="+query.toString());
		
	    List<HeaderInfo> headerList = (List<HeaderInfo>) query.execute();
	    headerList = (List<HeaderInfo>)pm.detachCopyAll(headerList);
	    //Collections.sort(headerList, new DateComparator());
		return headerList;
	}
	
	/*public List<LogFile> logList() {
		PersistenceManager pm = PMF.get().getPersistenceManager();
        Query query = pm.newQuery(LogFile.class);
        query.setOrdering("log_Id ascending");
        //System.out.println("query==="+query.toString());
		
		List<LogFile> logList = (List<LogFile>) query.execute();
		return logList;
	}
	
	public List<LogFile> getLogDetails() {
		PersistenceManager pm = PMF.get().getPersistenceManager();
	    Query query = pm.newQuery(LogFile.class);
	    //System.out.println("query==="+query.toString());
		
	    //query.setFilter(" validity == \"" + valid + "\"");
	    List<LogFile> logList = (List<LogFile>) query.execute();
	    logList = (List<LogFile>)pm.detachCopyAll(logList);
	    //Collections.sort(logList, new DateComparator());
		return logList;
	}*/
	
	public List<LogFile> getLogDetail(String header_id) {
		
		PersistenceManager pm = PMF.get().getPersistenceManager();
		String tmp = header_id;
		Query query = pm.newQuery(LogFile.class);
		query.setFilter("header_Id == \""+tmp+"\"");
		System.out.println("query==="+query.toString());
		
		try{
			List<LogFile> logList = (List<LogFile>) query.execute();
		    logList = (List<LogFile>)pm.detachCopyAll(logList);
		    /*for(LogFile f : logList){
		    	//System.out.println("f:"+ f.getLogFile().getValue());
		    	//System.out.println("f:"+ f.getLogFile().toString());
		    	//System.out.println("Data:"+ f.getLogFile());
		    	String[] logFileData = f.getLogFile().getValue().split(">");
		    	//System.out.println("value of the text field" + logFileData.length);
		    	for(int i=0;i<logFileData.length;i++) {
		    		System.out.println("logFileData["+i+"]" + logFileData[i]);
		    	}
		    }*/
		    System.out.println("logfile data"+logList.get(0).getLogFile().toString());
			return logList;
		}catch(Exception e){
			System.out.println("Exception at getLogDetail() = "+e);
		}finally{
			query.closeAll();
		}
		return null;
		
	}
	
	public void removeHeaderId(String headerIdParam) {
		synchronized (this) {
			PersistenceManager pm = PMF.get().getPersistenceManager();
			pm.currentTransaction().begin();
			Query headerQuery = pm.newQuery(HeaderInfo.class);			
			headerQuery.setFilter("header_Id == "+headerIdParam);
			
			Query LogQuery = pm.newQuery(LogFile.class);			
			LogQuery.setFilter("header_Id == \""+headerIdParam+"\"");
			
			try{
				//perform header delete
				List<HeaderInfo> modifyHeaderDetails = (List<HeaderInfo>) headerQuery.execute();
				for (HeaderInfo header_detail_obj : modifyHeaderDetails){
					pm.deletePersistent(header_detail_obj);
					pm.currentTransaction().commit();
					}
				
				//to avoid TransactionNotActiveException() 
				pm.currentTransaction().begin();
				
				//perform log delete
				List<LogFile> modifyLogFileDetails = (List<LogFile>) LogQuery.execute();
				//System.out.println("after execute = "+modifyLogFileDetails.size());
				for (LogFile log_file_obj : modifyLogFileDetails){
					pm.deletePersistent(log_file_obj);
					pm.currentTransaction().commit();
				}
				
				
			}catch(Exception e){
				System.out.println("Exception at removeHeaderId() = "+e);
			}finally{
				headerQuery.closeAll();
				LogQuery.closeAll();
			}			
		}
	}
	
	public boolean isParentIdExists(String parent_Id){
		
		try
    	{
        	PersistenceManager pm = PMF.get().getPersistenceManager();
    		Query query = pm.newQuery(HeaderInfo.class);
    		query.setFilter("parent_Id == '"+parent_Id+"'");
    		//System.out.println("query in log details now:" +query.toString() );
    		List<HeaderInfo> headerDetails = (List<HeaderInfo>) query.execute();
    		if(headerDetails.isEmpty()){
    			//status = "false";
    			Query query1 = pm.newQuery(HeaderInfo.class);
    			query1.setFilter("header_Id == "+parent_Id);
    			//System.out.println("Parent Id is null. Querying for header_Id:" +query1.toString() );
        		List<HeaderInfo> headerDetails2 = (List<HeaderInfo>) query1.execute();
        		if(headerDetails2.isEmpty()){
        			return false;
        		}
        		else{
        			return true;
        		}
    		}
    		else{
    			return true;
    		}
    	}catch(Exception e){
    		System.out.println("Exception during parentID presence check="+e);
        	e.printStackTrace();
        	return false;
    	}
		//return parent_Id;
	}
	
	public boolean updateHeaderDetails(String parentId,String changedHistory,String validity,Date lastUpdateTimeStamp){
		
		PersistenceManager pm = PMF.get().getPersistenceManager();
		pm.currentTransaction().begin();
		Query query = pm.newQuery(HeaderInfo.class);
		query.setFilter("parent_Id == '"+parentId+"'");
		try{
			List<HeaderInfo> editHeaderDetails = (List<HeaderInfo>) query.execute();
			for (HeaderInfo header_detail_obj : editHeaderDetails){
				header_detail_obj.setChangedHistory(changedHistory);
				header_detail_obj.setValidity(validity);
				header_detail_obj.setLastUpdateTimeStamp(lastUpdateTimeStamp);
				pm.currentTransaction().commit();
			}
			return true;
		}catch(Exception e){
			System.out.println("Exception at updateHeaderDetails() = "+e);
			return false;
		}finally{
			query.closeAll();
		}
	}
	
	public void addHeader(String parent_Id, String client_Id,String client_Ip,String clientTool,String clientOS,String interfaceName,String interfaceDesc,long interfaceSpeed,
			int mtu,int rwin,long receivedLength,long socketRecvBuf,String url,String playBackDateTime,Date dateTime,long duration,long length,String location,long maxBitrateAppl,
			long avgBitrateAppl,long minBitrateAppl,long maxBitrateSock,long avgBitrateSock,long minBitrateSock,Text file,int logFileSaveDur,String comments,String accessNetwork,
			String validity,String testContent,String keepAlive,String changedHistory,Date lastUpdateTimeStamp){
		synchronized (this) {
			PersistenceManager pm = PMF.get().getPersistenceManager();
	        try{
	        	
	        	HeaderInfo header_info_obj = new HeaderInfo(parent_Id,client_Id,client_Ip,clientTool,clientOS,interfaceName,interfaceDesc,interfaceSpeed,mtu,rwin,receivedLength,socketRecvBuf,
						url,playBackDateTime,dateTime,duration,length,location,maxBitrateAppl,avgBitrateAppl,minBitrateAppl,maxBitrateSock,avgBitrateSock,minBitrateSock,comments,accessNetwork,
						validity,testContent,keepAlive,changedHistory,lastUpdateTimeStamp);
	        	
	        	pm.makePersistent(header_info_obj);
				List<HeaderInfo> header_List = new ArrayList<HeaderInfo>();
				String header_id="";
				String client_Ids="";
					header_id = String.valueOf(header_info_obj.getKey().getId());//header_detail_obj.getKey().toString();
					client_Ids=header_info_obj.getClient_Id();
				try{
		        	LogFile log_file_obj = new LogFile(header_info_obj.getKey(),header_id,client_Id,file);
		        	Date endTime = new Date();
					long totalTime = logFileSaveDur;
					log_file_obj.setLogFileSaveDur(totalTime);
					pm.makePersistent(log_file_obj);
		        }catch(Exception e){
		        	System.out.println("Block exception="+e);
		        	e.printStackTrace();
		        }
				pm.evictAll();
				pm.close();
	        }catch(Exception e){
	        	System.out.println("Exception at addHeader() = "+e);
	        }
		}	
	}
	
	public void addLogFile(String header_Id,String client_Id,Text file){
		synchronized (this) {
			PersistenceManager pm = PMF.get().getPersistenceManager();
	        try{
	        	
	        	LogFile log_file_obj = null;//new LogFile(header_Id,client_Id,file);
				pm.makePersistentAll(log_file_obj);
				pm.evictAll();
				pm.close();
	        }catch(Exception e){
	        	System.out.println("Exception at addLogFile() = "+e);
	        }
		}
	}

}


