/*
 * Author: Susheel Kumar
 * Classname: SearchLogFiles.java
 * Version information: 1.0
 * Date:01/01/2011
 * Copyright © 2011 Sony Corporation. All rights reserved.
 */
package com.sony.process;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

//import com.google.appengine.repackaged.com.google.common.base.StringUtil;
import com.sony.bean.SearchCretria;
import com.sony.constant.BWAController;
import com.sony.model.HeaderInfo;
import com.sony.util.PaginationUtil;
import com.sony.util.SessionPaginationUtil;


//@SuppressWarnings("serial")
public class SearchLogFiles extends HttpServlet {
	private static final Logger log = Logger.getLogger(SearchLogFiles.class.getName());
	public void doPost(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException{
		String action = req.getParameter("action");
		//if (!(StringUtil.isEmpty(action)) && action.equalsIgnoreCase("search")) {
		if(action != null && !"".equalsIgnoreCase(action) && action.equalsIgnoreCase("search")){
			performSearch(req, res);
		} else{
			setPagination(req,res);
		}
		res.sendRedirect("jsp/LogList.jsp");
   }	
	
	public void doGet(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException{
		try {
				
			List<HeaderInfo> headerList = null;
			req.getSession().removeAttribute("searchCretria");
			SearchCretria searchCretria = new SearchCretria();
			searchCretria.setSortField("date");
			searchCretria.setSortDir("DESC");
			//searchCretria.setValidity("TRUE");
			headerList = BWAController.INSTANCE.getRecentHeaderId(searchCretria.getValidity());
			calculateMinMaxAvgBitrate(headerList, searchCretria);
			req.getSession().setAttribute("searchCretria", searchCretria);
			
			//Storing first 1000 records in the session.
			int totalSize = headerList.size();
			int toIndex = totalSize < 1000 ? headerList.size():1000;
			List<HeaderInfo> list = new ArrayList(headerList.subList(0,toIndex));
			req.getSession().setAttribute("headerList", list);
			
			if (headerList.isEmpty()) {
				// need to handle the error condition
				req.getSession().removeAttribute("headerList");
				req.getSession().removeAttribute("listDisplayed");
			} else {
				setDisplayList(req, res, list,totalSize);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		res.sendRedirect("jsp/LogList.jsp");
   }
	
	public void performSearch(HttpServletRequest req, HttpServletResponse res) {
		String location = req.getParameter("location");
		String interfaceName = req.getParameter("interfaceName");
		String validity = req.getParameter("validity");
		String client_Id = req.getParameter("client_Id");
		long avgBitrateAppl = Long.parseLong(req.getParameter("avg"));
		long minBitrateAppl = Long.parseLong(req.getParameter("min"));
		long duration = Long.parseLong(req.getParameter("duration"));
		String sortField = req.getParameter("sort_params");
		String sortDir = req.getParameter("sortType");
		SearchCretria searchCretria = new SearchCretria();
		req.getSession().removeAttribute("listDisplayed");
		req.getSession().removeAttribute("headerList");
		if (location != null && !location.equalsIgnoreCase("ALL")) {

			searchCretria.setLocation(location);
		}
		if (validity != null && !validity.equalsIgnoreCase("ALL")) {

			searchCretria.setValidity(validity);
		}
		if (interfaceName != null && !interfaceName.equalsIgnoreCase("ALL")) {

			searchCretria.setInterfaceName(interfaceName);
		}
		if (client_Id != null && !client_Id.equalsIgnoreCase("")) {

			searchCretria.setClient_Id(client_Id);
		}
		if (avgBitrateAppl != 0) {

			searchCretria.setAvgBitrateAppl(avgBitrateAppl);
		}
		if (minBitrateAppl != 0) {

			searchCretria.setMinBitrateAppl(minBitrateAppl);
		}
		if (duration != 0) {
			searchCretria.setDuration(duration);
		}
		searchCretria.setSortField(sortField);
		searchCretria.setSortDir(sortDir);
		
		//List<HeaderInfo> headerList = BWAController.INSTANCE.getMatchedLogs(searchCretria);
		List<HeaderInfo> headerList = BWAController.INSTANCE.getMatchedLogs(searchCretria);
		calculateMinMaxAvgBitrate(headerList, searchCretria);
		req.getSession().setAttribute("searchCretria", searchCretria);
		
		//Storing first 1000 records in the session.
		int totalSize = headerList.size();
		int toIndex = totalSize < 1000 ? headerList.size():1000;
		List<HeaderInfo> list = new ArrayList(headerList.subList(0,toIndex));
		req.getSession().setAttribute("headerList", list);
		
		if(headerList.isEmpty()){
			req.getSession().removeAttribute("headerList");
			req.getSession().removeAttribute("listDisplayed");
		}else{
			setDisplayList(req,res,list,totalSize);
		}
	}
	
	public void setDisplayList(HttpServletRequest req, HttpServletResponse res, List<HeaderInfo> headerList,int totalsize) {
		PaginationUtil paginationUtil = new PaginationUtil(20,totalsize);
		paginationUtil.nextPage();
		
		SessionPaginationUtil sessionPageUtil = new SessionPaginationUtil(1000,totalsize);
		paginationUtil.setCurrentSessionPage(sessionPageUtil.getCurrentSessionPage());
		//paginationUtil.currentPage(pageNumber);
		int toIndex = paginationUtil.getToIndex() > totalsize ? totalsize : paginationUtil.getToIndex();
		//List<HeaderInfo> listDisplayed = headerList;//.subList(paginationUtil.getFromIndex(), toIndex);
		List<HeaderInfo> listDisplayed = new ArrayList(headerList.subList(paginationUtil.getFromIndex(), toIndex));
		req.getSession().setAttribute("listDisplayed", listDisplayed);
		req.getSession().setAttribute("headerList", headerList);
		req.getSession().setAttribute("paginationUtil", paginationUtil);
		req.getSession().setAttribute("sessionPageUtil", sessionPageUtil);
	}
	
	public void setPagination(HttpServletRequest req, HttpServletResponse res){
		String navigation = req.getParameter("action");
		PaginationUtil paginationUtil = (PaginationUtil) req.getSession()
				.getAttribute("paginationUtil");
		SessionPaginationUtil sessionPageUtil  = (SessionPaginationUtil) req.getSession().getAttribute("sessionPageUtil");
		SearchCretria searchCretria =(SearchCretria)req.getSession().getAttribute("searchCretria");
		
		List<HeaderInfo> headerList = null;
		if (paginationUtil != null) {
			if (navigation != null && navigation.equalsIgnoreCase("next")) {
				paginationUtil.nextPage();
			} else if (navigation != null
					&& navigation.equalsIgnoreCase("previous")) {
				paginationUtil.previousPage();
			}else if (navigation != null
					&& navigation.equalsIgnoreCase("back")) {
				int current = Integer.parseInt(req.getParameter("currentPosition"));
				
				int pageNo = 0;
				if(current % 20 == 0){
					pageNo = current/20;
				}else{
					pageNo = current/20 + 1;
				}
				paginationUtil.currentPage(pageNo);
			}
			else if (navigation != null
					&& navigation.equalsIgnoreCase("Jump")) {
				int pageNo = Integer.parseInt(req.getParameter("pageNumber"));
				paginationUtil.currentPage(pageNo);
			}
			
			int toIndexTemp = paginationUtil.getToIndex() ;//+ ((paginationUtil.getCurrentSessionPage() - 1) * 1000);
			//System.out.println("paginationUtil.getToIndex():" + paginationUtil.getToIndex());
			int pageNo = (toIndexTemp/1000) + (toIndexTemp%1000 > 0?1:0);
			int listToIndexTemp1 = toIndexTemp%1000 == 0 ? toIndexTemp:toIndexTemp%1000;
			int listFromIndexTemp1 = listToIndexTemp1 - 20;
			if(listFromIndexTemp1 < 0){
				listFromIndexTemp1 = 0;
			}
			int fromIndex = ((pageNo-1) *1000);
			int toIndex = pageNo * 1000;
			if(toIndex > paginationUtil.getTotalSize()){
				toIndex = paginationUtil.getTotalSize();
			}
			//System.out.println("fromIndex:" + fromIndex);
			//System.out.println("to:" + toIndex);
			
			//System.out.println("listFromIndexTemp1:" + listFromIndexTemp1);
			//System.out.println("listToIndexTemp1:" + listToIndexTemp1);
			//System.out.println("pageNo:" + pageNo);
			//System.out.println("sessionPageUtil.getCurrentSessionPage():" + sessionPageUtil.getCurrentSessionPage());
			if(pageNo != sessionPageUtil.getCurrentSessionPage() ){
				List<HeaderInfo> headerList1 = BWAController.INSTANCE.getMatchedLogs(searchCretria);
				//System.out.println("headerList1" + headerList1.size());
				calculateMinMaxAvgBitrate(headerList1, searchCretria);
				//Storing first 1000 records in the session.
				int totalSize = headerList1.size();
				//System.out.println("headerList1:" + totalSize);
				//System.out.println("fromIndex,toIndex:" + fromIndex + ":"+ toIndex);
				List<HeaderInfo> list = new ArrayList(headerList1.subList(fromIndex,toIndex));
				req.getSession().setAttribute("headerList", list);
				sessionPageUtil.setCurrentSessionPage(pageNo);
				paginationUtil.setCurrentSessionPage(pageNo);
				req.getSession().setAttribute("paginationUtil", paginationUtil);
				req.getSession().setAttribute("sessionPageUtil", sessionPageUtil);
				req.getSession().setAttribute("headerList",list);
			}
			headerList = (List<HeaderInfo>) req.getSession().getAttribute("headerList");
			//System.out.println("headerList" + headerList.size());
			//int toIndex = paginationUtil.getToIndex() > headerList.size()? headerList.size(): paginationUtil.getToIndex();
			
			listToIndexTemp1 = listToIndexTemp1 > headerList.size()? headerList.size(): listToIndexTemp1;
			//List<HeaderInfo> listDisplayed = headerList;//.subList(paginationUtil.getFromIndex(), toIndex);
			List<HeaderInfo> listDisplayed = new ArrayList(headerList.subList(listFromIndexTemp1, listToIndexTemp1));
			//List<HeaderInfo> listDisplayed = paginationUtil
			//		.getDisplayList(headerList);
			req.getSession().setAttribute("listDisplayed", listDisplayed);
			req.getSession().setAttribute("paginationUtil", paginationUtil);
			req.getSession().setAttribute("sessionPageUtil", sessionPageUtil);
		}
	}
	public SearchCretria calculateMinMaxAvgBitrate(List<HeaderInfo> list, SearchCretria searchCretria){
		long avg = 0;
		float sum = 0.0f;
		long max_bit_rate=0;
		long min_bit_rate=0;
		if(!(list.isEmpty())){
			max_bit_rate = list.get(0).getMaxBitrateAppl();
			min_bit_rate = list.get(0).getMinBitrateAppl();
			for(HeaderInfo headerinfo: list){
				sum += headerinfo.getAvgBitrateAppl();
				if(headerinfo.getMinBitrateAppl() < min_bit_rate){
					min_bit_rate = headerinfo.getMinBitrateAppl();
				}
				if(headerinfo.getMinBitrateAppl() > max_bit_rate){
					max_bit_rate = headerinfo.getMinBitrateAppl();
				}		
			}
			avg = (long) (sum/list.size());
			searchCretria.setAvg(avg);
			searchCretria.setMax(max_bit_rate);
			searchCretria.setMin(min_bit_rate);
		}
		return searchCretria;
	}
}




